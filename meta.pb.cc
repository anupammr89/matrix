// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "meta.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Package_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Package_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_meta_2eproto() {
  protobuf_AddDesc_meta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "meta.proto");
  GOOGLE_CHECK(file != NULL);
  Package_descriptor_ = file->message_type(0);
  static const int Package_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, virtualpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, realfullpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, isdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, listitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, openmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, serialized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, replicano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, migrateinst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, uprange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, sourcezht_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, targetzht_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, rfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, lfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, migringpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, gmembership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, isfwdmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, asneighbor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, wifecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, nummoves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, nodehistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, currnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, numwait_),
  };
  Package_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Package_descriptor_,
      Package::default_instance_,
      Package_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Package));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_meta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Package_descriptor_, &Package::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_meta_2eproto() {
  delete Package::default_instance_;
  delete Package_reflection_;
}

void protobuf_AddDesc_meta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmeta.proto\"\362\003\n\007Package\022\023\n\013virtualPath\030"
    "\001 \001(\t\022\013\n\003num\030\002 \001(\005\022\024\n\014realFullPath\030\003 \001(\t"
    "\022\r\n\005isDir\030\030 \001(\010\022\020\n\010listItem\030\031 \003(\t\022\020\n\010ope"
    "nMode\030\032 \001(\005\022\014\n\004mode\030\033 \001(\005\022\022\n\nserialized\030"
    "\027 \001(\014\022\021\n\tOperation\030\010 \001(\005\022\021\n\treplicaNo\030\t "
    "\001(\005\022\016\n\006opcode\030\n \001(\t\022\r\n\005rcode\030\013 \001(\t\022\023\n\013mi"
    "grateInst\030\014 \001(\r\022\017\n\007uprange\030\r \001(\010\022\021\n\tsour"
    "ceZHT\030\016 \001(\t\022\021\n\ttargetZHT\030\017 \001(\t\022\016\n\006rfname"
    "\030\020 \001(\t\022\016\n\006lfname\030\021 \001(\t\022\022\n\nmigringpos\030\022 \003"
    "(\004\022\023\n\013gmembership\030\023 \001(\t\022\020\n\010isfwdmsg\030\024 \001("
    "\010\022\022\n\nasneighbor\030\025 \001(\t\022\020\n\010wifecode\030\026 \001(\t\022"
    "\020\n\010nummoves\030\005 \001(\r\022\023\n\013nodehistory\030\004 \001(\t\022\020"
    "\n\010currnode\030\006 \001(\r\022\017\n\007numwait\030\007 \001(\r", 513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meta.proto", &protobuf_RegisterTypes);
  Package::default_instance_ = new Package();
  Package::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_meta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_meta_2eproto {
  StaticDescriptorInitializer_meta_2eproto() {
    protobuf_AddDesc_meta_2eproto();
  }
} static_descriptor_initializer_meta_2eproto_;


// ===================================================================

const ::std::string Package::_default_virtualpath_;
const ::std::string Package::_default_realfullpath_;
const ::std::string Package::_default_serialized_;
const ::std::string Package::_default_opcode_;
const ::std::string Package::_default_rcode_;
const ::std::string Package::_default_sourcezht_;
const ::std::string Package::_default_targetzht_;
const ::std::string Package::_default_rfname_;
const ::std::string Package::_default_lfname_;
const ::std::string Package::_default_gmembership_;
const ::std::string Package::_default_asneighbor_;
const ::std::string Package::_default_wifecode_;
const ::std::string Package::_default_nodehistory_;
#ifndef _MSC_VER
const int Package::kVirtualPathFieldNumber;
const int Package::kNumFieldNumber;
const int Package::kRealFullPathFieldNumber;
const int Package::kIsDirFieldNumber;
const int Package::kListItemFieldNumber;
const int Package::kOpenModeFieldNumber;
const int Package::kModeFieldNumber;
const int Package::kSerializedFieldNumber;
const int Package::kOperationFieldNumber;
const int Package::kReplicaNoFieldNumber;
const int Package::kOpcodeFieldNumber;
const int Package::kRcodeFieldNumber;
const int Package::kMigrateInstFieldNumber;
const int Package::kUprangeFieldNumber;
const int Package::kSourceZHTFieldNumber;
const int Package::kTargetZHTFieldNumber;
const int Package::kRfnameFieldNumber;
const int Package::kLfnameFieldNumber;
const int Package::kMigringposFieldNumber;
const int Package::kGmembershipFieldNumber;
const int Package::kIsfwdmsgFieldNumber;
const int Package::kAsneighborFieldNumber;
const int Package::kWifecodeFieldNumber;
const int Package::kNummovesFieldNumber;
const int Package::kNodehistoryFieldNumber;
const int Package::kCurrnodeFieldNumber;
const int Package::kNumwaitFieldNumber;
#endif  // !_MSC_VER

Package::Package()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Package::InitAsDefaultInstance() {
}

Package::Package(const Package& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Package::SharedCtor() {
  _cached_size_ = 0;
  virtualpath_ = const_cast< ::std::string*>(&_default_virtualpath_);
  num_ = 0;
  realfullpath_ = const_cast< ::std::string*>(&_default_realfullpath_);
  isdir_ = false;
  openmode_ = 0;
  mode_ = 0;
  serialized_ = const_cast< ::std::string*>(&_default_serialized_);
  operation_ = 0;
  replicano_ = 0;
  opcode_ = const_cast< ::std::string*>(&_default_opcode_);
  rcode_ = const_cast< ::std::string*>(&_default_rcode_);
  migrateinst_ = 0u;
  uprange_ = false;
  sourcezht_ = const_cast< ::std::string*>(&_default_sourcezht_);
  targetzht_ = const_cast< ::std::string*>(&_default_targetzht_);
  rfname_ = const_cast< ::std::string*>(&_default_rfname_);
  lfname_ = const_cast< ::std::string*>(&_default_lfname_);
  gmembership_ = const_cast< ::std::string*>(&_default_gmembership_);
  isfwdmsg_ = false;
  asneighbor_ = const_cast< ::std::string*>(&_default_asneighbor_);
  wifecode_ = const_cast< ::std::string*>(&_default_wifecode_);
  nummoves_ = 0u;
  nodehistory_ = const_cast< ::std::string*>(&_default_nodehistory_);
  currnode_ = 0u;
  numwait_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Package::~Package() {
  SharedDtor();
}

void Package::SharedDtor() {
  if (virtualpath_ != &_default_virtualpath_) {
    delete virtualpath_;
  }
  if (realfullpath_ != &_default_realfullpath_) {
    delete realfullpath_;
  }
  if (serialized_ != &_default_serialized_) {
    delete serialized_;
  }
  if (opcode_ != &_default_opcode_) {
    delete opcode_;
  }
  if (rcode_ != &_default_rcode_) {
    delete rcode_;
  }
  if (sourcezht_ != &_default_sourcezht_) {
    delete sourcezht_;
  }
  if (targetzht_ != &_default_targetzht_) {
    delete targetzht_;
  }
  if (rfname_ != &_default_rfname_) {
    delete rfname_;
  }
  if (lfname_ != &_default_lfname_) {
    delete lfname_;
  }
  if (gmembership_ != &_default_gmembership_) {
    delete gmembership_;
  }
  if (asneighbor_ != &_default_asneighbor_) {
    delete asneighbor_;
  }
  if (wifecode_ != &_default_wifecode_) {
    delete wifecode_;
  }
  if (nodehistory_ != &_default_nodehistory_) {
    delete nodehistory_;
  }
  if (this != default_instance_) {
  }
}

void Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Package::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Package_descriptor_;
}

const Package& Package::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();  return *default_instance_;
}

Package* Package::default_instance_ = NULL;

Package* Package::New() const {
  return new Package;
}

void Package::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (virtualpath_ != &_default_virtualpath_) {
        virtualpath_->clear();
      }
    }
    num_ = 0;
    if (_has_bit(2)) {
      if (realfullpath_ != &_default_realfullpath_) {
        realfullpath_->clear();
      }
    }
    isdir_ = false;
    openmode_ = 0;
    mode_ = 0;
    if (_has_bit(7)) {
      if (serialized_ != &_default_serialized_) {
        serialized_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    operation_ = 0;
    replicano_ = 0;
    if (_has_bit(10)) {
      if (opcode_ != &_default_opcode_) {
        opcode_->clear();
      }
    }
    if (_has_bit(11)) {
      if (rcode_ != &_default_rcode_) {
        rcode_->clear();
      }
    }
    migrateinst_ = 0u;
    uprange_ = false;
    if (_has_bit(14)) {
      if (sourcezht_ != &_default_sourcezht_) {
        sourcezht_->clear();
      }
    }
    if (_has_bit(15)) {
      if (targetzht_ != &_default_targetzht_) {
        targetzht_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (rfname_ != &_default_rfname_) {
        rfname_->clear();
      }
    }
    if (_has_bit(17)) {
      if (lfname_ != &_default_lfname_) {
        lfname_->clear();
      }
    }
    if (_has_bit(19)) {
      if (gmembership_ != &_default_gmembership_) {
        gmembership_->clear();
      }
    }
    isfwdmsg_ = false;
    if (_has_bit(21)) {
      if (asneighbor_ != &_default_asneighbor_) {
        asneighbor_->clear();
      }
    }
    if (_has_bit(22)) {
      if (wifecode_ != &_default_wifecode_) {
        wifecode_->clear();
      }
    }
    nummoves_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (nodehistory_ != &_default_nodehistory_) {
        nodehistory_->clear();
      }
    }
    currnode_ = 0u;
    numwait_ = 0u;
  }
  listitem_.Clear();
  migringpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtualPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtualpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virtualpath().data(), this->virtualpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_realFullPath;
        break;
      }
      
      // optional string realFullPath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realFullPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realfullpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realfullpath().data(), this->realfullpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nodehistory;
        break;
      }
      
      // optional string nodehistory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodehistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodehistory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodehistory().data(), this->nodehistory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nummoves;
        break;
      }
      
      // optional uint32 nummoves = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nummoves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nummoves_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currnode;
        break;
      }
      
      // optional uint32 currnode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currnode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currnode_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_numwait;
        break;
      }
      
      // optional uint32 numwait = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numwait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numwait_)));
          _set_bit(26);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Operation;
        break;
      }
      
      // optional int32 Operation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_replicaNo;
        break;
      }
      
      // optional int32 replicaNo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicaNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicano_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_opcode;
        break;
      }
      
      // optional string opcode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opcode().data(), this->opcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rcode;
        break;
      }
      
      // optional string rcode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcode().data(), this->rcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_migrateInst;
        break;
      }
      
      // optional uint32 migrateInst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migrateInst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrateinst_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_uprange;
        break;
      }
      
      // optional bool uprange = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uprange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uprange_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sourceZHT;
        break;
      }
      
      // optional string sourceZHT = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceZHT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcezht()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcezht().data(), this->sourcezht().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_targetZHT;
        break;
      }
      
      // optional string targetZHT = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetZHT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetzht()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetzht().data(), this->targetzht().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_rfname;
        break;
      }
      
      // optional string rfname = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rfname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rfname().data(), this->rfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_lfname;
        break;
      }
      
      // optional string lfname = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lfname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lfname().data(), this->lfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_migringpos;
        break;
      }
      
      // repeated uint64 migringpos = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migringpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 144, input, this->mutable_migringpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_migringpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_migringpos;
        if (input->ExpectTag(154)) goto parse_gmembership;
        break;
      }
      
      // optional string gmembership = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmembership:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmembership()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gmembership().data(), this->gmembership().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_isfwdmsg;
        break;
      }
      
      // optional bool isfwdmsg = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfwdmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfwdmsg_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_asneighbor;
        break;
      }
      
      // optional string asneighbor = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asneighbor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asneighbor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->asneighbor().data(), this->asneighbor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_wifecode;
        break;
      }
      
      // optional string wifecode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wifecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wifecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wifecode().data(), this->wifecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_serialized;
        break;
      }
      
      // optional bytes serialized = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_isDir;
        break;
      }
      
      // optional bool isDir = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdir_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_listItem;
        break;
      }
      
      // repeated string listItem = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_listitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listitem(0).data(), this->listitem(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_listItem;
        if (input->ExpectTag(208)) goto parse_openMode;
        break;
      }
      
      // optional int32 openMode = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openmode_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_mode;
        break;
      }
      
      // optional int32 mode = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string virtualPath = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualpath().data(), this->virtualpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->virtualpath(), output);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional string realFullPath = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realfullpath().data(), this->realfullpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->realfullpath(), output);
  }
  
  // optional string nodehistory = 4;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodehistory().data(), this->nodehistory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nodehistory(), output);
  }
  
  // optional uint32 nummoves = 5;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nummoves(), output);
  }
  
  // optional uint32 currnode = 6;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->currnode(), output);
  }
  
  // optional uint32 numwait = 7;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numwait(), output);
  }
  
  // optional int32 Operation = 8;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->operation(), output);
  }
  
  // optional int32 replicaNo = 9;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->replicano(), output);
  }
  
  // optional string opcode = 10;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->opcode(), output);
  }
  
  // optional string rcode = 11;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcode().data(), this->rcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->rcode(), output);
  }
  
  // optional uint32 migrateInst = 12;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->migrateinst(), output);
  }
  
  // optional bool uprange = 13;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->uprange(), output);
  }
  
  // optional string sourceZHT = 14;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcezht().data(), this->sourcezht().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sourcezht(), output);
  }
  
  // optional string targetZHT = 15;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetzht().data(), this->targetzht().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->targetzht(), output);
  }
  
  // optional string rfname = 16;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rfname().data(), this->rfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->rfname(), output);
  }
  
  // optional string lfname = 17;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lfname().data(), this->lfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->lfname(), output);
  }
  
  // repeated uint64 migringpos = 18;
  for (int i = 0; i < this->migringpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      18, this->migringpos(i), output);
  }
  
  // optional string gmembership = 19;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmembership().data(), this->gmembership().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->gmembership(), output);
  }
  
  // optional bool isfwdmsg = 20;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->isfwdmsg(), output);
  }
  
  // optional string asneighbor = 21;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asneighbor().data(), this->asneighbor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->asneighbor(), output);
  }
  
  // optional string wifecode = 22;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wifecode().data(), this->wifecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->wifecode(), output);
  }
  
  // optional bytes serialized = 23;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->serialized(), output);
  }
  
  // optional bool isDir = 24;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->isdir(), output);
  }
  
  // repeated string listItem = 25;
  for (int i = 0; i < this->listitem_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->listitem(i).data(), this->listitem(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->listitem(i), output);
  }
  
  // optional int32 openMode = 26;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->openmode(), output);
  }
  
  // optional int32 mode = 27;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Package::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string virtualPath = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualpath().data(), this->virtualpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtualpath(), target);
  }
  
  // optional int32 num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional string realFullPath = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realfullpath().data(), this->realfullpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->realfullpath(), target);
  }
  
  // optional string nodehistory = 4;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodehistory().data(), this->nodehistory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nodehistory(), target);
  }
  
  // optional uint32 nummoves = 5;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nummoves(), target);
  }
  
  // optional uint32 currnode = 6;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->currnode(), target);
  }
  
  // optional uint32 numwait = 7;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numwait(), target);
  }
  
  // optional int32 Operation = 8;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->operation(), target);
  }
  
  // optional int32 replicaNo = 9;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->replicano(), target);
  }
  
  // optional string opcode = 10;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->opcode(), target);
  }
  
  // optional string rcode = 11;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcode().data(), this->rcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rcode(), target);
  }
  
  // optional uint32 migrateInst = 12;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->migrateinst(), target);
  }
  
  // optional bool uprange = 13;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->uprange(), target);
  }
  
  // optional string sourceZHT = 14;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcezht().data(), this->sourcezht().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sourcezht(), target);
  }
  
  // optional string targetZHT = 15;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetzht().data(), this->targetzht().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->targetzht(), target);
  }
  
  // optional string rfname = 16;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rfname().data(), this->rfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->rfname(), target);
  }
  
  // optional string lfname = 17;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lfname().data(), this->lfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->lfname(), target);
  }
  
  // repeated uint64 migringpos = 18;
  for (int i = 0; i < this->migringpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(18, this->migringpos(i), target);
  }
  
  // optional string gmembership = 19;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmembership().data(), this->gmembership().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->gmembership(), target);
  }
  
  // optional bool isfwdmsg = 20;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->isfwdmsg(), target);
  }
  
  // optional string asneighbor = 21;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asneighbor().data(), this->asneighbor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->asneighbor(), target);
  }
  
  // optional string wifecode = 22;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wifecode().data(), this->wifecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->wifecode(), target);
  }
  
  // optional bytes serialized = 23;
  if (_has_bit(7)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->serialized(), target);
  }
  
  // optional bool isDir = 24;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->isdir(), target);
  }
  
  // repeated string listItem = 25;
  for (int i = 0; i < this->listitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listitem(i).data(), this->listitem(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->listitem(i), target);
  }
  
  // optional int32 openMode = 26;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->openmode(), target);
  }
  
  // optional int32 mode = 27;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Package::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string virtualPath = 1;
    if (has_virtualpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtualpath());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional string realFullPath = 3;
    if (has_realfullpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realfullpath());
    }
    
    // optional bool isDir = 24;
    if (has_isdir()) {
      total_size += 2 + 1;
    }
    
    // optional int32 openMode = 26;
    if (has_openmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openmode());
    }
    
    // optional int32 mode = 27;
    if (has_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional bytes serialized = 23;
    if (has_serialized()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Operation = 8;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }
    
    // optional int32 replicaNo = 9;
    if (has_replicano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicano());
    }
    
    // optional string opcode = 10;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opcode());
    }
    
    // optional string rcode = 11;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcode());
    }
    
    // optional uint32 migrateInst = 12;
    if (has_migrateinst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrateinst());
    }
    
    // optional bool uprange = 13;
    if (has_uprange()) {
      total_size += 1 + 1;
    }
    
    // optional string sourceZHT = 14;
    if (has_sourcezht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcezht());
    }
    
    // optional string targetZHT = 15;
    if (has_targetzht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetzht());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string rfname = 16;
    if (has_rfname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rfname());
    }
    
    // optional string lfname = 17;
    if (has_lfname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lfname());
    }
    
    // optional string gmembership = 19;
    if (has_gmembership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmembership());
    }
    
    // optional bool isfwdmsg = 20;
    if (has_isfwdmsg()) {
      total_size += 2 + 1;
    }
    
    // optional string asneighbor = 21;
    if (has_asneighbor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asneighbor());
    }
    
    // optional string wifecode = 22;
    if (has_wifecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wifecode());
    }
    
    // optional uint32 nummoves = 5;
    if (has_nummoves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nummoves());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string nodehistory = 4;
    if (has_nodehistory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodehistory());
    }
    
    // optional uint32 currnode = 6;
    if (has_currnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currnode());
    }
    
    // optional uint32 numwait = 7;
    if (has_numwait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numwait());
    }
    
  }
  // repeated string listItem = 25;
  total_size += 2 * this->listitem_size();
  for (int i = 0; i < this->listitem_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->listitem(i));
  }
  
  // repeated uint64 migringpos = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->migringpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->migringpos(i));
    }
    total_size += 2 * this->migringpos_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Package::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Package* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Package*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
  GOOGLE_CHECK_NE(&from, this);
  listitem_.MergeFrom(from.listitem_);
  migringpos_.MergeFrom(from.migringpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_virtualpath(from.virtualpath());
    }
    if (from._has_bit(1)) {
      set_num(from.num());
    }
    if (from._has_bit(2)) {
      set_realfullpath(from.realfullpath());
    }
    if (from._has_bit(3)) {
      set_isdir(from.isdir());
    }
    if (from._has_bit(5)) {
      set_openmode(from.openmode());
    }
    if (from._has_bit(6)) {
      set_mode(from.mode());
    }
    if (from._has_bit(7)) {
      set_serialized(from.serialized());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_operation(from.operation());
    }
    if (from._has_bit(9)) {
      set_replicano(from.replicano());
    }
    if (from._has_bit(10)) {
      set_opcode(from.opcode());
    }
    if (from._has_bit(11)) {
      set_rcode(from.rcode());
    }
    if (from._has_bit(12)) {
      set_migrateinst(from.migrateinst());
    }
    if (from._has_bit(13)) {
      set_uprange(from.uprange());
    }
    if (from._has_bit(14)) {
      set_sourcezht(from.sourcezht());
    }
    if (from._has_bit(15)) {
      set_targetzht(from.targetzht());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_rfname(from.rfname());
    }
    if (from._has_bit(17)) {
      set_lfname(from.lfname());
    }
    if (from._has_bit(19)) {
      set_gmembership(from.gmembership());
    }
    if (from._has_bit(20)) {
      set_isfwdmsg(from.isfwdmsg());
    }
    if (from._has_bit(21)) {
      set_asneighbor(from.asneighbor());
    }
    if (from._has_bit(22)) {
      set_wifecode(from.wifecode());
    }
    if (from._has_bit(23)) {
      set_nummoves(from.nummoves());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_nodehistory(from.nodehistory());
    }
    if (from._has_bit(25)) {
      set_currnode(from.currnode());
    }
    if (from._has_bit(26)) {
      set_numwait(from.numwait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Package::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  
  return true;
}

void Package::Swap(Package* other) {
  if (other != this) {
    std::swap(virtualpath_, other->virtualpath_);
    std::swap(num_, other->num_);
    std::swap(realfullpath_, other->realfullpath_);
    std::swap(isdir_, other->isdir_);
    listitem_.Swap(&other->listitem_);
    std::swap(openmode_, other->openmode_);
    std::swap(mode_, other->mode_);
    std::swap(serialized_, other->serialized_);
    std::swap(operation_, other->operation_);
    std::swap(replicano_, other->replicano_);
    std::swap(opcode_, other->opcode_);
    std::swap(rcode_, other->rcode_);
    std::swap(migrateinst_, other->migrateinst_);
    std::swap(uprange_, other->uprange_);
    std::swap(sourcezht_, other->sourcezht_);
    std::swap(targetzht_, other->targetzht_);
    std::swap(rfname_, other->rfname_);
    std::swap(lfname_, other->lfname_);
    migringpos_.Swap(&other->migringpos_);
    std::swap(gmembership_, other->gmembership_);
    std::swap(isfwdmsg_, other->isfwdmsg_);
    std::swap(asneighbor_, other->asneighbor_);
    std::swap(wifecode_, other->wifecode_);
    std::swap(nummoves_, other->nummoves_);
    std::swap(nodehistory_, other->nodehistory_);
    std::swap(currnode_, other->currnode_);
    std::swap(numwait_, other->numwait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Package::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Package_descriptor_;
  metadata.reflection = Package_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
